package clientname.gui;

import java.awt.Color;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.shader.Framebuffer;
import net.minecraft.util.ResourceLocation;

public class SplashProgress {
	
	private static final int MAX = 10;
	private static int PROGRESS = 0;
	private static String CURRENT = "";
	private static ResourceLocation splash;
	private static UnicodeFontRenderer ufr;
	
	public static void update() {
		if(Minecraft.getMinecraft() == null || Minecraft.getMinecraft().getLanguageManager() == null) {
			return;
		}
		drawSplash(Minecraft.getMinecraft().getTextureManager());
	}
	
	public static void setProgress(int givenProgress, String givenText) {
		PROGRESS = givenProgress;
		CURRENT = givenText;
		update();
	}
	
	public static void drawSplash(TextureManager tm) {
	    Minecraft mc = Minecraft.getMinecraft();
	    ScaledResolution scaledResolution = new ScaledResolution(mc);

	    int screenWidth = scaledResolution.getScaledWidth();
	    int screenHeight = scaledResolution.getScaledHeight();

	    // Framebuffer erstellen
	    Framebuffer framebuffer = new Framebuffer(screenWidth, screenHeight, true);
	    framebuffer.bindFramebuffer(false);

	    // Orthografische Projektion einrichten
	    GlStateManager.matrixMode(GL11.GL_PROJECTION);
	    GlStateManager.loadIdentity();
	    GlStateManager.ortho(0.0, screenWidth, screenHeight, 0.0, -1.0, 1.0);
	    GlStateManager.matrixMode(GL11.GL_MODELVIEW);
	    GlStateManager.loadIdentity();
	    GlStateManager.translate(0.0F, 0.0F, -1.0F);

	    GlStateManager.disableLighting();
	    GlStateManager.disableFog();
	    GlStateManager.disableDepth();
	    GlStateManager.enableTexture2D();

	    // Splash-Bild laden
	    if (splash == null) {
	        splash = new ResourceLocation("clientname/splash.png");
	    }
	    tm.bindTexture(splash);

	    // Hintergrundbild zeichnen (Vollbild)
	    GlStateManager.resetColor();
	    GlStateManager.color(1.0F, 1.0F, 1.0F);
	    Gui.drawScaledCustomSizeModalRect(
	        0, 0,                         // X und Y Startposition
	        0, 0,                         // Ursprung des Bildes
	        1920, 1080,                   // Originalgröße des Bildes
	        screenWidth, screenHeight,    // Skalierung auf Bildschirmgröße
	        1920, 1080                    // Originalbildgröße
	    );

	    // Fortschrittsanzeige zeichnen
	    drawProgress();

	    framebuffer.unbindFramebuffer();
	    framebuffer.framebufferRender(screenWidth, screenHeight);

	    GlStateManager.enableAlpha();
	    GlStateManager.alphaFunc(516, 0.1F);

	    mc.updateDisplay();
	}

	
	private static void drawProgress() {
	    Minecraft mc = Minecraft.getMinecraft();
	    ScaledResolution sr = new ScaledResolution(mc);

	    int screenWidth = sr.getScaledWidth();
	    int screenHeight = sr.getScaledHeight();

	    // Fortschritt berechnen
	    double progressRatio = (double) PROGRESS / MAX;
	    int progressWidth = (int) (screenWidth * progressRatio);

	    // Ladebalken Hintergrund
	    Gui.drawRect(
	        screenWidth / 4,                      // X1 (mittig - 25%)
	        screenHeight - 40,                    // Y1 (40px vom unteren Rand)
	        screenWidth - (screenWidth / 4),      // X2 (mittig + 25%)
	        screenHeight - 20,                    // Y2 (20px hoch)
	        new Color(0, 0, 0, 50).getRGB()       // Schwarzer Hintergrund mit Transparenz
	    );

	    // Fortschrittsbalken
	    Gui.drawRect(
	        screenWidth / 4,                      // X1 (mittig - 25%)
	        screenHeight - 40,                    // Y1
	        screenWidth / 4 + progressWidth,      // X2 (Länge des Fortschritts)
	        screenHeight - 20,                    // Y2
	        new Color(149, 201, 144).getRGB()     // Fortschrittsfarbe (grün)
	    );

	    // Textanzeige (mittig)
	    if (ufr == null) {
	        ufr = UnicodeFontRenderer.getFontOnPC("Arial", 20);
	    }
	    String stepText = PROGRESS + "/" + MAX;

	    ufr.drawString(
	        CURRENT,                             // Aktueller Status
	        screenWidth / 2 - ufr.getStringWidth(CURRENT) / 2, // X (mittig)
	        screenHeight - 70,                  // Y (oberhalb des Ladebalkens)
	        0xFFFFFFFF                          // Weiß
	    );
	    ufr.drawString(
	        stepText,                            // Fortschritts-Schritt
	        screenWidth / 2 - ufr.getStringWidth(stepText) / 2, // X (mittig)
	        screenHeight - 90,                  // Y (oberhalb von CURRENT)
	        0xFFE1E1E1                          // Grau
	    );
	}

}
